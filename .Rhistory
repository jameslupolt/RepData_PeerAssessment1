df$State
df[df$State == state][,]
df[df$State == state][1,1]
df[df$State == state,]
df[df$State == state,][3]
df[df$State == state,][1:2,3]
df[df$State == state,ยง]
df[df$State == state,1]
df[df$State == state,1:3]
df[df$State == state,1:3,3]
df[df$State == state,1:3][3]
df[df$State == state,1:3]
df[df$State == state,1:2]
df[df$State == state,1:2][3]
df[df$State == state,1:2]
df[df$State == state,1:2]
df[df$State == state,1:2][,3]
df[df$State == state,1:2][3,]
result <- rbind(result,df[df$State == state,1:2][3,])
result
result <- rbind(result,df[df$State == state,1:2][3,])
result
result <- data.frame()
newrow <- df[df$State == state,1:2][num,]
newrow
newrow.names
row.names(newrow)
row.names(newrow) <- state
row.names(newrow)
newrow <- df[df$State == state,1:2][num,]
row.names(newrow) <- state
result <- rbind(result,newrow)
result
result <- data.frame(hospital,state)
col.names(result)
colnames(result)
colnames(result) <- c("hospital","state")
colnames(result)
result
source('~/rankall.R')
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
library(swirl)
swirl()
num_vect <- as.numeric(c("0.5","55","-10","6"))
num_vect
num_vect <- c("0.5","55","-10","6"))
num_vect <- c("0.5","55","-10","6")
num_vect <- c(0.5,55,-10,6)
tf <- (num_vect < 1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = "")
paste(my_char,collapse = " ")
my_name <- c(my_char, "James")
my_name
paste(my_name,collapse = " ")
aste("Hello",
| "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3),c("X", "Y", "Z"), sep = " ")
paste(c(1:3),c("X", "Y", "Z"), sep = "")
paste(1:3,c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(MyData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x
x[c(3,5,7),]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect[bar]
vect["bar"]
vect[c("foo", "bar")]
myVector <- c(1:20)
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)
| <- c(4, 5)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
?
'''jkj'
myMatrix2 <- matrix(data = 1:10, nrow = 4, ncol = 5)
myMatrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(myMatrix,myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight","bp", "rating", "test")
colunames(myData) <- cnames
colnames(myData) <- cnames
myData
library("rJava")
library("xlsx")
?xlsx
?read.xlsx
read.xlsx("my.xlsx",startRow=18,endRow=23,header=TRUE)
read.xlsx("my.xlsx",startRow=18,endRow=23,header=TRUE,sheetIndex=1)
read.xlsx("my.xlsx",startRow=18,endRow=23,header=TRUE,sheetIndex=1)
a <- read.xlsx("my.xlsx",startRow=18,endRow=23,header=TRUE,sheetIndex=1)
dat <- read.xlsx("my.xlsx",startRow=18,endRow=23,header=TRUE,sheetIndex=1)
sum(dat$Zip*dat$Ext,na.rm=T)
data <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
require(XML)
packages.install("XML")
install.packages("XML")
require(XML)
data <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
data <- xmlParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xml_data <- xmlToList(data)
head(xml_data)
xml_data[[response]]
xml_data[["response"]]
xml_data[["response"]][["row"]]
xml_data[["response"]][["row"]][["location_1"]]
head(xml_data)
xml_data$row$row$zipcode
xml_data$row$row$zipcode
xml_data$row$
dsf
xml_data$row
xml_data$row$neighborhood
xml_data$row$row
xml_data$row$row$zipcode
data <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInteral=TRUE)
data <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal=TRUE)
rootNode(data)
rootNode < xmlRoot(data)
rootNode <- xmlRoot(data)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[zipcode]]
rootNode[[1]][[1]][["zipcode"]]
xmlSApply(rootNode,zipcode)
xmlSApply(rootNode,"zipcode")
xmlSApply(rootNode,[[zipcode]])
xmlSApply(rootNode,row)
xmlSApply(rootNode,"//zipcode")
xmlSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode,"//zipcode = 21231",xmlValue)
xpathSApply(rootNode,"//zipcode == 21231",xmlValue)
xpathSApply(rootNode,"//zipcode = 21231",xmlValue)
xpathSApply(rootNode,"//zipcode" = 21231,xmlValue)
xpathSApply(rootNode,"//zipcode" = '21231',xmlValue)
xpathSApply(rootNode,"//zipcode" = "21231",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
df <- data.frame(xpathSApply(rootNode,"//zipcode",xmlValue))
df
colnames(df)
head(df)
colnames(df) <- c("zipcode")
head(df)
df[df$zipcode = "21231"]
df[df$zipcode == "21231"]
df[df$zipcode == "21231",]
df[df$zipcode == "21231",zipcode]
df[df$zipcode == "21231","zipcode"]
count(df[df$zipcode == "21231","zipcode"])
df[df$zipcode == "21231","zipcode"]
nrow(df[df$zipcode == "21231","zipcode"])
nrow(df[df$zipcode == "21231",])
df$zipcode == "21231","zipcode"
df[df$zipcode == "21231","zipcode"]
a <- df[df$zipcode == "21231","zipcode"]
a
nrow(a)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="another.csv")
?download.file
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="another.csv",method="curl")
?dt
DT <- read("another.csv")
DT <- readcsv("another.csv")
DT <- read-csv("another.csv")
DT <- read.csv("another.csv")
DT
colnames(DT)
DT <- data.table(DT)
data.frame()
require(data.table)
install.packages(data.table)
install.packages("data.table")
require(data.table)
DT <- data.table(DT)
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
colnames(DT)
data <- read.csv("another.csv")
?data.table
?read.csv
head(data)
data <- read.csv("another.csv", colClasses = "numeric")
data <- read.csv("another.csv", colClasses = "character")
data <- read.csv("another.csv", colClasses = "factor")
DT <- data.table(data)
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
DT$pwgtp15
DT$"pwgtp15"
colnames(DT)
DT$"SEX"
DT$"fdsfd"
DT$"wgtp76"
read.csv("some.csv")
data <- read.csv("some.csv")
data <- read.csv("some.csv", quote = "")
DT <- data.table(data)
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
mean(DT[DT$SEX==1,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
mean(DT$pwgtp15,by=DT$SEX)
system.time(rowMeans(DT)[DT$SEX==1])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX]))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX]))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT[DT$SEX==1,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)
colnames(rowMeans(DT))
colnames(DT)
colnames(rowMeans(DT))
class(DT)
DT <- data.table(read.csv("some.csv", quote = ""))
class(DT)
tables()
DT <- read.table("some.csv", header=T, sep=",")
class(DT)
head(DT)
?read.table
?data.table
DT <- data.table(A = rep(1:3, each=4), B = rep(1:4, each=3), C = rep(1:2, 6), key = "A,B")
class(DT)
DT <- read.table("some.csv", header=T, sep=",")
class(DT)
DT <- data.table(DT)
class(DT)
tables()
DT <- data.table(A = rep(1:3, each=4), B = rep(1:4, each=3), C = rep(1:2, 6), key = "A,B")
tables()
DT <- fread("some.csv")
DT
class(DT)
tables
head(DT)
?
?
''
?fread
DT <- fread("some.csv",sep=",")
head(DT)
tables()
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DT <- fread("some.csv",sep=",",header=TRUE)
tables()
head(DT)
colnames(DT)
tables()
tables()
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
?rowMeans
?rowMeans
(DT)[DT$SEX==1]
DT[,c(2,3)]
(DT)[DT$SEX==1,SEX]
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT[DT$SEX==1,$pwgtp15])
mean(DT[DT$SEX==1,pwgtp15])
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?text
?axis
?lines
?lpoints
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, text = "poop")
print (p)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text(30,33,labels=tp))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text(30,33,labels=c("pee","poop")))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text(30,33,labels=c("pee","poop"))
)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text(30,33,"poop"))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text("poop"))
print(p)
?print.trellis()
?trellis.par.set
trellis.par.get()
?print.trellis()
trellis.par.get()
?trellis.par.set
?splom
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozne,  data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone,  data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality,  geom = "smooth")
qplot(Wind, Ozone,  data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone,  data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone,  data = airquality, facets = . ~ Month)
summary(airquality)
airquality
str(airquality)
library(ggplot2)
ggplot(movies, aes(votes, rating))
movies
qplot(votes, rating,  data = movies)
ggplot(votes, rating,  data = movies)
ggplot(movies, aes(votes, rating))
q
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
g <- ggplot(movies, aes(votes, rating))
summary(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g + geom_point())
?tapply
?tapply
?ls
pwd
getwd()
"hi"
"Mean steps per day: " mean_steps_per_day
"Mean steps per day: " + mean_steps_per_day
setwd("/Users/jameslupolt/Documents/data_science/rep_research/RepData_PeerAssessment1")
datafile <- "activity.zip"
if (!file.exists(datafile)) {
stop("Missing data file -- wrong working directory?")
} else {
stepdata <- read.csv(file=unzip(datafile))
}
steps_per_day <- tapply(stepdata$steps, stepdata$date, sum, na.rm=T)
hist(steps_per_day,main="Steps per day",xlab="Steps")
mean_steps_per_days <- mean(steps_per_day)
median_steps_per_days <- median(steps_per_day)
"Mean steps per day: " + mean_steps_per_day
"Mean steps per day: " + mean_steps_per_days
"Mean steps per day: "  mean_steps_per_days
cat("Mean steps per day:", mean_steps_per_day)
cat("Mean steps per day:", mean_steps_per_days)
?hist
?hist
?hist
