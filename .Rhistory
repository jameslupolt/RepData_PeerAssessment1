df$zipcode == "21231","zipcode"
df[df$zipcode == "21231","zipcode"]
a <- df[df$zipcode == "21231","zipcode"]
a
nrow(a)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="another.csv")
?download.file
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="another.csv",method="curl")
?dt
DT <- read("another.csv")
DT <- readcsv("another.csv")
DT <- read-csv("another.csv")
DT <- read.csv("another.csv")
DT
colnames(DT)
DT <- data.table(DT)
data.frame()
require(data.table)
install.packages(data.table)
install.packages("data.table")
require(data.table)
DT <- data.table(DT)
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
colnames(DT)
data <- read.csv("another.csv")
?data.table
?read.csv
head(data)
data <- read.csv("another.csv", colClasses = "numeric")
data <- read.csv("another.csv", colClasses = "character")
data <- read.csv("another.csv", colClasses = "factor")
DT <- data.table(data)
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
DT$pwgtp15
DT$"pwgtp15"
colnames(DT)
DT$"SEX"
DT$"fdsfd"
DT$"wgtp76"
read.csv("some.csv")
data <- read.csv("some.csv")
data <- read.csv("some.csv", quote = "")
DT <- data.table(data)
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
mean(DT[DT$SEX==1,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
mean(DT$pwgtp15,by=DT$SEX)
system.time(rowMeans(DT)[DT$SEX==1])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX]))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX]))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT[DT$SEX==1,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)
colnames(rowMeans(DT))
colnames(DT)
colnames(rowMeans(DT))
class(DT)
DT <- data.table(read.csv("some.csv", quote = ""))
class(DT)
tables()
DT <- read.table("some.csv", header=T, sep=",")
class(DT)
head(DT)
?read.table
?data.table
DT <- data.table(A = rep(1:3, each=4), B = rep(1:4, each=3), C = rep(1:2, 6), key = "A,B")
class(DT)
DT <- read.table("some.csv", header=T, sep=",")
class(DT)
DT <- data.table(DT)
class(DT)
tables()
DT <- data.table(A = rep(1:3, each=4), B = rep(1:4, each=3), C = rep(1:2, 6), key = "A,B")
tables()
DT <- fread("some.csv")
DT
class(DT)
tables
head(DT)
?
?
''
?fread
DT <- fread("some.csv",sep=",")
head(DT)
tables()
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DT <- fread("some.csv",sep=",",header=TRUE)
tables()
head(DT)
colnames(DT)
tables()
tables()
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
?rowMeans
?rowMeans
(DT)[DT$SEX==1]
DT[,c(2,3)]
(DT)[DT$SEX==1,SEX]
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT[DT$SEX==1,$pwgtp15])
mean(DT[DT$SEX==1,pwgtp15])
system.time(rowMeans(DT)[DT$SEX==1]); system.time(rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?text
?axis
?lines
?lpoints
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, text = "poop")
print (p)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text(30,33,labels=tp))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text(30,33,labels=c("pee","poop")))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text(30,33,labels=c("pee","poop"))
)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text(30,33,"poop"))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, panel.text("poop"))
print(p)
?print.trellis()
?trellis.par.set
trellis.par.get()
?print.trellis()
trellis.par.get()
?trellis.par.set
?splom
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozne,  data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone,  data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality,  geom = "smooth")
qplot(Wind, Ozone,  data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone,  data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone,  data = airquality, facets = . ~ Month)
summary(airquality)
airquality
str(airquality)
library(ggplot2)
ggplot(movies, aes(votes, rating))
movies
qplot(votes, rating,  data = movies)
ggplot(votes, rating,  data = movies)
ggplot(movies, aes(votes, rating))
q
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
g <- ggplot(movies, aes(votes, rating))
summary(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g + geom_point())
?tapply
?tapply
help()
help()
?tapply
datafile <- "activity.zip"
wd <- "/Users/jameslupolt/Documents/data_science/rep_research/RepData_PeerAssessment1"
setwd(wd)
if (!file.exists(datafile)) {
stop("Missing data file -- wrong working directory?")
} else {
stepdata <- read.csv(file=unzip(datafile))
}
stepdata
head(stepdata, 10)
head(stepdata, 100)
head(stepdata, 1000)
colnames(stepdata)
as.POSIXct(stepdata$interval,format="%H:%M")
as.POSIXct(stepdata$interval,format="%H:%M:%S")
unique(stepdata$interval)
str(unique(stepdata$interval))
str(steps_per_interval)
steps_per_interval <- tapply(stepdata$steps, stepdata$interval, mean, na.rm=T)
str(steps_per_interval)
df <- data.frame(unique_intervals=unique(stepdata$interval), steps_per_interval = tapply(stepdata$steps, stepdata$interval, mean, na.rm=T))
ggplot(data=df, aes(x=unique_intervals, y=steps_per_interval)) +
geom_line() +
geom_point( size=4, shape=21, fill="white") +
ggtitle("Mean Steps Per Interval") +
xlab("Interval") +
ylab("Mean Steps")
library(ggplot2)
df <- data.frame(unique_intervals=unique(stepdata$interval), steps_per_interval = tapply(stepdata$steps, stepdata$interval, mean, na.rm=T))
ggplot(data=df, aes(x=unique_intervals, y=steps_per_interval)) +
geom_line() +
geom_point( size=4, shape=21, fill="white") +
ggtitle("Mean Steps Per Interval") +
xlab("Interval") +
ylab("Mean Steps")
ggtitle("Mean Steps Per Interval") +
''
which.max(df$steps_per_interval)
df <- data.frame(unique_intervals=unique(stepdata$interval), steps_per_interval = tapply(stepdata$steps, stepdata$interval, mean, na.rm=T))
ggplot(data=df, aes(x=unique_intervals, y=steps_per_interval)) +
geom_line(colour="red") +
ggtitle("Mean Steps Per Interval") +
scale_x_discrete(breaks=seq(from=0, to=2400, by=200)) +
xlab("Interval") +
ylab("Mean Steps")
which.max(df$steps_per_interval)
df$steps_per_interval
which.max(df$steps_per_interval)
which.max(df$steps_per_interval)[0]
(which.max(df$steps_per_interval)[0])
$(which.max(df$steps_per_interval)[0])
which.max(df$steps_per_interval)[0]
which.max(df$steps_per_interval)
str(which.max(df$steps_per_interval))
names(which.max(df$steps_per_interval))
df <- data.frame(unique_intervals=unique(stepdata$interval), steps_per_interval = tapply(stepdata$steps, stepdata$interval, mean, na.rm=T))
ggplot(data=df, aes(x=unique_intervals, y=steps_per_interval)) +
geom_line(colour="red") +
ggtitle("Mean Steps Per Interval") +
scale_x_discrete(breaks=seq(from=0, to=2400, by=200)) +
xlab("Interval") +
ylab("Mean Steps")
df$unique_intervals
df$steps_per_interval
names(which.max(df$steps_per_interval))
which.max(df$steps_per_interval)
df$steps_per_interval[104,]
df$steps_per_interval[,104]
df$steps_per_interval[1,]
df[104,]
is.na(stepdata$steps)
sum(is.na(stepdata$steps))
stepdata_cleaned <- stepdata
stepdata_cleaned$steps[which(is.na())] <- steps_per_interval[match(stepdata$interval[which(is.na())], interval)]
stepdata_cleaned[is.na()]
stepdata_cleaned[is.na(steps)]
stepdata_cleaned[is.na(stepdata_cleaned$steps]
stepdata_cleaned[is.na(stepdata_cleaned$steps)]
stepdata_cleaned[is.na(stepdata_cleaned$steps),]
steps_per_interval
colnames(steps_per_interval)
str(steps_per_interval)
names(steps_per_interval)
stepdata_cleaned <- stepdata
missing_vals <- is.na(stepdata$steps)
stepdata_cleaned$steps[which(missing_vals)] <- steps_per_interval[match(stepdata_cleaned$interval[which(missing_vals)], interval)]
stepdata_cleaned <- stepdata
missing_vals <- is.na(stepdata$steps)
stepdata_cleaned$steps[which(missing_vals)] <- steps_per_interval[match(stepdata$interval[which(missing_vals)], interval)]
if (!file.exists(datafile)) {
stop("Missing data file -- wrong working directory?")
} else {
stepdata <- read.csv(file=unzip(datafile))
}
steps_per_day <- tapply(stepdata$steps, stepdata$date, sum, na.rm=T)
mean_steps_per_day <- mean(steps_per_day)
median_steps_per_day <- median(steps_per_day)
hist(steps_per_day,main="Steps Per Day",xlab="Steps", col="lightgreen")
stepdata_cleaned <- stepdata
missing_vals <- is.na(stepdata$steps)
stepdata_cleaned$steps[which(missing_vals)] <- steps_per_interval[match(stepdata$interval[which(missing_vals)], interval)]
stepdata_cleaned <- stepdata
missing_vals <- is.na(stepdata$steps)
stepdata_cleaned$steps[which(missing_vals)] <- steps_per_interval[match(stepdata$interval[which(missing_vals)], unique(stepdata$interval))]
sum(is.na(stepdata$steps))
sum(is.na(stepdata_cleaned$steps))
str(stepdata$steps)
str(stepdata_cleaned$steps)
head(stepdata, 10)
head(steps_per_interval, 10)
head(stepdata_cleaned, 10)
stepdata[100,]
stepdata[1000,]
stepdata[1001,]
stepdata[2001,]
stepdata[5000,]
stepdata_cleaned[5000,]
steps_per_day_cleaned
steps_per_day_cleaned <- tapply(stepdata_cleaned$steps, stepdata_cleaned$date, sum)
steps_per_day_cleaned
steps_per_day
steps_per_day_cleaned
stepdata_cleaned$steps
stepdata_cleaned$steps <- round(stepdata_cleaned$steps,0)
stepdata_cleaned$steps
stepdata_cleaned <- stepdata
missing_vals <- is.na(stepdata$steps)
steps_per_interval <- tapply(stepdata$steps, stepdata$interval, mean, na.rm=T)
stepdata_cleaned$steps[which(missing_vals)] <- steps_per_interval[match(stepdata$interval[which(missing_vals)], unique(stepdata$interval))]
stepdata_cleaned
stepdata_cleaned <- stepdata
missing_vals <- is.na(stepdata$steps)
steps_per_interval <- tapply(stepdata$steps, stepdata$interval, mean, na.rm=T)
stepdata_cleaned$steps[which(missing_vals)] <- steps_per_interval[match(stepdata$interval[which(missing_vals)], unique(stepdata$interval))]
stepdata_cleaned
library(ggplot2)
datafile <- "activity.zip"
wd <- "/Users/jameslupolt/Documents/data_science/rep_research/RepData_PeerAssessment1"
setwd(wd)
if (!file.exists(datafile)) {
stop("Missing data file -- wrong working directory?")
} else {
stepdata <- read.csv(file=unzip(datafile))
}
steps_per_day <- tapply(stepdata$steps, stepdata$date, sum, na.rm=T)
mean_steps_per_day <- mean(steps_per_day)
median_steps_per_day <- median(steps_per_day)
hist(steps_per_day,main="Steps Per Day",xlab="Steps", col="lightgreen")
stepdata_cleaned <- stepdata
missing_vals <- is.na(stepdata$steps)
steps_per_interval <- tapply(stepdata$steps, stepdata$interval, mean, na.rm=T)
stepdata_cleaned$steps[which(missing_vals)] <- steps_per_interval[match(stepdata$interval[which(missing_vals)], unique(stepdata$interval))]
stepdata_cleaned
head(stepdata_cleaned,10)
stepdata[interval == 40]
stepdata[stepdata$interval == 40]
stepdata[stepdata$interval == 40,]
head(stepdata_cleaned,10)
head(round(stepdata_cleaned$steps)
)
head(round(stepdata_cleaned$steps,200)
)
head(round(stepdata_cleaned$steps),200)
head(round(stepdata_cleaned$steps),4000)
head(round(stepdata$steps),4000)
stepdata_cleaned$steps <- round(stepdata_cleaned$steps)
stepdata_cleaned$steps
mean_steps_per_day_cleaned
stepdata_cleaned <- stepdata
missing_vals <- is.na(stepdata$steps)
steps_per_interval <- tapply(stepdata$steps, stepdata$interval, mean, na.rm=T)
stepdata_cleaned$steps[which(missing_vals)] <- steps_per_interval[match(stepdata$interval[which(missing_vals)], unique(stepdata$interval))]
stepdata_cleaned$steps <- round(stepdata_cleaned$steps)
steps_per_day_cleaned <- tapply(stepdata_cleaned$steps, stepdata_cleaned$date, sum, na.rm=T)
mean_steps_per_day_cleaned <- mean(steps_per_day_cleaned)
median_steps_per_day_cleaned <- median(steps_per_day_cleaned)
mean_steps_per_day_cleaned <- mean(steps_per_day_cleaned)
mean_steps_per_day_cleaned
mean_steps_per_day
colnames(stepdata_cleaned)
stepdata_cleaned$daycategory <- as.POSIXlt(stepdata_cleaned$date,format="%Y-%m-%d")$wday
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 0] <- "weekend"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 1] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 2] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 3] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 4] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 5] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 6] <- "weekend"
# Convert to factor so that ggplot will preserve actual values in labels
stepdata_cleaned$daycategory <- factor(stepdata_cleaned$daycategory)
# Rebuild steps_per_interval on the cleaned dataset -- also need weekday/weekend for plotting
steps_per_interval <- tapply(stepdata$steps, stepdata$interval, mean)
steps_per_interval_cleaned <- tapply(stepdata_cleaned$steps, list(stepdata_cleaned$interval, stepdata_cleaned$day), mean))
stepdata_cleaned$daycategory <- as.POSIXlt(stepdata_cleaned$date,format="%Y-%m-%d")$wday
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 0] <- "weekend"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 1] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 2] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 3] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 4] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 5] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 6] <- "weekend"
# Convert to factor so that ggplot will preserve actual values in labels
stepdata_cleaned$daycategory <- factor(stepdata_cleaned$daycategory)
# Rebuild steps_per_interval on the cleaned dataset -- also need weekday/weekend for plotting
steps_per_interval <- tapply(stepdata$steps, stepdata$interval, mean)
steps_per_interval_cleaned <- tapply(stepdata_cleaned$steps, list(stepdata_cleaned$interval, stepdata_cleaned$day), mean)
steps_per_interval_cleaned[steps_per_interval_cleaned$daycategory == "weekend",]
str(steps_per_interval_cleaned)
steps_per_interval_cleaned[,"weekday"]
stepdata_cleaned[stepdata_cleaned$daycategory == "weekend",]
steps_per_interval_weekday <- with(stepdata_cleaned[stepdata_cleaned$daycategory == "weekend",], tapply(steps, interval, mean))
str(steps_per_interval_weekend)
str(steps_per_interval_weekday)
steps_per_interval_weekend <- with(stepdata_cleaned[stepdata_cleaned$daycategory == "weekend",], tapply(steps, interval, mean))
steps_per_interval_weekday <- with(stepdata_cleaned[stepdata_cleaned$daycategory == "weekday",], tapply(steps, interval, mean))
par(mfrow = c(2,1))
plot(x <- stepdata_cleaned$interval, y <- steps_per_interval_weekend, type="l", ylab = "Mean Steps (Weekend)", xlab = "" )
plot(x <- stepdata_cleaned$interval, y <- steps_per_interval_weekday, type="l", ylab = "Mean Steps (Weekday)", xlab = "Interval")
unique(stepdata$interval)
str(unique(stepdata$interval))
str(steps_per_interval_weekend)
stepdata_cleaned$daycategory <- as.POSIXlt(stepdata_cleaned$date,format="%Y-%m-%d")$wday
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 0] <- "weekend"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 1] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 2] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 3] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 4] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 5] <- "weekday"
stepdata_cleaned$daycategory[stepdata_cleaned$daycategory == 6] <- "weekend"
# Convert to factor so that ggplot will preserve actual values in labels
stepdata_cleaned$daycategory <- factor(stepdata_cleaned$daycategory)
# Rebuild steps_per_interval on the cleaned dataset -- also need weekday/weekend for plotting
steps_per_interval_weekend <- with(stepdata_cleaned[stepdata_cleaned$daycategory == "weekend",], tapply(steps, interval, mean))
steps_per_interval_weekday <- with(stepdata_cleaned[stepdata_cleaned$daycategory == "weekday",], tapply(steps, interval, mean))
par(mfrow = c(2,1))
plot(x <- unique(stepdata_cleaned$interval), y <- steps_per_interval_weekend, type="l", ylab = "Mean Steps (Weekend)", xlab = "" )
plot(x <- unique(stepdata_cleaned$interval), y <- steps_per_interval_weekday, type="l", ylab = "Mean Steps (Weekday)", xlab = "Interval")
